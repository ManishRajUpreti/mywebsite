/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: wallmasterr (https://sketchfab.com/wallmasterr)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/tenhun-falling-spaceman-fanart-9fd80b6a259f41fd99e6f56eee686dc5
Title: Tenhun Falling spaceman (FanArt)
*/

import React, { useEffect, useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useMotionValue, useSpring } from "framer-motion"; // Corrected import for framer-motion
import { useFrame } from "@react-three/fiber";

export function Astronaut(props) {
  // Create a ref to attach to the main group of the 3D model.
  // This allows us to directly manipulate its properties (like position).
  const group = useRef();

  // useGLTF hook loads the 3D model from the specified path.
  // It returns the model's nodes (geometry), materials, and animations.
  const { nodes, materials, animations } = useGLTF(
    "/models/tenhun_falling_spaceman_fanart.glb"
  );

  // useAnimations hook takes the animations and the group ref to control playback.
  const { actions } = useAnimations(animations, group);

  // useEffect to play the first animation clip once the component mounts.
  // It checks if there are any animations available and plays the first one.
  useEffect(() => {
    if (animations.length > 0) {
      actions[animations[0].name]?.play();
    }
  }, [actions, animations]); // Dependencies ensure this runs when actions or animations change

  // useMotionValue creates a MotionValue to track the Y position of the astronaut.
  // It's initialized to 5, meaning the astronaut starts higher up.
  const yPosition = useMotionValue(5);

  // useSpring creates a spring-based animation for the yPosition MotionValue.
  // This makes the astronaut smoothly "fall" into its initial position.
  const ySpring = useSpring(yPosition, { damping: 30 });

  // useEffect to trigger the spring animation.
  // It sets the target Y position to -1, making the astronaut move down.
  useEffect(() => {
    ySpring.set(-1);
  }, [ySpring]); // Dependency ensures this runs when ySpring is ready

  // useFrame hook runs on every frame render, allowing for continuous updates.
  // Here, it updates the group's Y position to match the current value of the spring.
  useFrame(() => {
    group.current.position.y = ySpring.get();
  });

  return (
    // The main group for the 3D model.
    // ref: Attaches the group ref for direct manipulation.
    // ...props: Spreads any props passed to the Astronaut component (like scale and position from Hero.jsx).
    // dispose={null}: Prevents Three.js from disposing of the geometry/materials when the component unmounts.
    // rotation: Sets the initial rotation of the model.
    // scale: Sets the initial scale, defaulting to 0.3 if not provided by props.
    // position: Sets the initial position, defaulting if not provided by props.
    <group
      ref={group}
      {...props}
      dispose={null}
      rotation={[-Math.PI / 2, -0.2, 2.2]}
      scale={props.scale || 0.3}
      position={props.position || [1.3, -1, 0]}
    >
      {/* These nested groups represent the structure of your GLTF model */}
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model">
          <group name="Root">
            <group name="metarig">
              {/* Primitive object for the root joint of the skeleton */}
              <primitive object={nodes.metarig_rootJoint} />
              {/* Skinned meshes are parts of the model that are animated by the skeleton */}
              <skinnedMesh
                name="Cube001_0"
                geometry={nodes.Cube001_0.geometry}
                material={materials["AstronautFallingTexture.png"]}
                skeleton={nodes.Cube001_0.skeleton}
              />
              <skinnedMesh
                name="Cube005_0"
                geometry={nodes.Cube005_0.geometry}
                material={materials["AstronautFallingTexture.png"]}
                skeleton={nodes.Cube005_0.skeleton}
              />
              <skinnedMesh
                name="Cube002_0"
                geometry={nodes.Cube002_0.geometry}
                material={materials["AstronautFallingTexture.png"]}
                skeleton={nodes.Cube002_0.skeleton}
              />
              <skinnedMesh
                name="Plane_0"
                geometry={nodes.Plane_0.geometry}
                material={materials["AstronautFallingTexture.png"]}
                skeleton={nodes.Plane_0.skeleton}
              />
              <skinnedMesh
                name="Cube008_0"
                geometry={nodes.Cube008_0.geometry}
                material={materials["AstronautFallingTexture.png"]}
                skeleton={nodes.Cube008_0.skeleton}
              />
              <skinnedMesh
                name="Cube004_0"
                geometry={nodes.Cube004_0.geometry}
                material={materials["AstronautFallingTexture.png"]}
                skeleton={nodes.Cube004_0.skeleton}
              />
              <skinnedMesh
                name="Cube003_0"
                geometry={nodes.Cube003_0.geometry}
                material={materials["AstronautFallingTexture.png"]}
                skeleton={nodes.Cube003_0.skeleton}
              />
              <skinnedMesh
                name="Cube_0"
                geometry={nodes.Cube_0.geometry}
                material={materials["AstronautFallingTexture.png"]}
                skeleton={nodes.Cube_0.skeleton}
              />
              <skinnedMesh
                name="Cube009_0"
                geometry={nodes.Cube009_0.geometry}
                material={materials["AstronautFallingTexture.png"]}
                skeleton={nodes.Cube009_0.skeleton}
              />
              <skinnedMesh
                name="Cube011_0"
                geometry={nodes.Cube011_0.geometry}
                material={materials["AstronautFallingTexture.png"]}
                skeleton={nodes.Cube011_0.skeleton}
              />
              {/* Empty groups might be placeholders from the GLTF export */}
              <group name="Cube001" />
              <group name="Cube005" />
              <group name="Cube002" />
              <group name="Plane" />
              <group name="Cube008" />
              <group name="Cube004" />
              <group name="Cube003" />
              <group name="Cube" />
              <group
                name="Cube009"
                rotation={[-2.708, 0.013, -1.447]}
                scale={1.307}
              />
              <group name="Cube011" />
            </group>
          </group>
        </group>
      </group>
    </group>
  );
}

// Preload the GLTF model to improve loading performance.
useGLTF.preload("/models/tenhun_falling_spaceman_fanart.glb");
